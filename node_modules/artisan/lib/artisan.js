"use strict";
/*!
 *  Artisan
 *  Author: Kevin Coughlin @kevintcoughlin , <kevintcoughlin@gmail.com>
 *  MIT Licensed
 */

/**
 * Module Dependencies
 */
var program = require('commander')
  , config = require('./config')
  , fs = require('fs')
  , mkdirp = require('mkdirp')
  , ansi = require('ansi')
  , cursor = ansi(process.stdout);

program
  .version('0.0.1')
  .option('-e, --examples', 'Generate "examples" folder')
  .option('-lib, --lib', 'Generate "lib" folder')
  .option('-t, --test', 'Generate "test" folder')
  .option('-l, --license <type>', 'specify license type (MIT | Apache | GPL | LGPL | BSD | FreeBSD | Mozilla | Common) [MIT]', 'MIT')
  .parse(process.argv);

var appName = program.args[0];

/**
 * If no app name was passed prompt user for one
 */
if(!program.args[0]) {
	// Prompt user for top-level dir name
	program.prompt('Please name your new node module: ', function ( name ) {
		canCreate( name, bootstrap );
	});
} else {
	canCreate( appName, bootstrap );
}

/**
 * Check if directory exists, if so then prompt to create or exit
 */
function canCreate( name, callback ) {
	// Check if dir exists
	if(fs.existsSync('./' + name)) {
		// Confirm replacement of dir
		program.confirm('Directory already exists. Replace? ', function( result ){
			// Replace
			if(result) {
				process.stdin.destroy();
				callback( name );
			}
			// Exit 
			else {
				process.stdin.destroy();
				console.log('You chose not to replace the directory.\nExiting Artisan now.');
				return;
			}
		});
	} 
	// Create dir
	else {
		process.stdin.destroy();
		callback( name );
	}
}

function writeDirectory( name, fname ) {
	mkdirp('./' + name + '/' + fname, function (err) {
	    if (err) console.error(err)
	    else console.log('│   ├── ' + fname)
	});
}

function writeFile( name, fname ) {
	fs.writeFile('./' + name + '/' + fname, null, function (err) {
	  if (err) return console.log(err);
	  console.log('│   ├── ' + fname);
	});
}

/**
 * Bootstrap app files.
 */
function bootstrap( name ) {
	console.log('Bootstrapping your new node module - ' + name);

	// Create top-level dir
	mkdirp('./' + name, function (err) {
	    if (err) console.error(err)
	    else console.log('├── ' + name)
	});

	var items = config.items;

	for ( var i = 0; i < items.length; i++ ){

		var fname = items[i].name;

		if(items[i].type === 'file') {
			writeFile(name, fname);			
		} 
		else {
			writeDirectory(name, fname);	
		}
	}
	cursor.reset();
}